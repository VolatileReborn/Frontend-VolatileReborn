{"ast":null,"code":"import { ref, computed, watch, nextTick, onMounted } from 'vue';\nimport { isNumber, useTimeoutFn, isClient } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\nimport { useModal } from '../../../hooks/use-modal/index.mjs';\nimport { useRestoreActive } from '../../../hooks/use-restore-active/index.mjs';\n\nconst useDialog = (props, {\n  emit\n}, targetRef) => {\n  let lastPosition = \"\";\n  const visible = ref(false);\n  const closed = ref(false);\n  const rendered = ref(false);\n  const {\n    nextZIndex\n  } = useZIndex();\n  const zIndex = ref(props.zIndex || nextZIndex());\n  let openTimer = void 0;\n  let closeTimer = void 0;\n  const normalizeWidth = computed(() => isNumber(props.width) ? `${props.width}px` : props.width);\n  const style = computed(() => {\n    const style2 = {};\n    const varPrefix = `--el-dialog`;\n\n    if (!props.fullscreen) {\n      if (props.top) {\n        style2[`${varPrefix}-margin-top`] = props.top;\n      }\n\n      if (props.width) {\n        style2[`${varPrefix}-width`] = normalizeWidth.value;\n      }\n    }\n\n    return style2;\n  });\n\n  function afterEnter() {\n    emit(\"opened\");\n  }\n\n  function afterLeave() {\n    emit(\"closed\");\n    emit(UPDATE_MODEL_EVENT, false);\n\n    if (props.destroyOnClose) {\n      rendered.value = false;\n    }\n  }\n\n  function beforeLeave() {\n    emit(\"close\");\n  }\n\n  function open() {\n    closeTimer == null ? void 0 : closeTimer();\n    openTimer == null ? void 0 : openTimer();\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;\n      ({\n        stop: openTimer\n      } = useTimeoutFn(() => doOpen(), props.openDelay));\n    } else {\n      doOpen();\n    }\n  }\n\n  function close() {\n    openTimer == null ? void 0 : openTimer();\n    closeTimer == null ? void 0 : closeTimer();\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;\n      ({\n        stop: closeTimer\n      } = useTimeoutFn(() => doClose(), props.closeDelay));\n    } else {\n      doClose();\n    }\n  }\n\n  function hide(shouldCancel) {\n    if (shouldCancel) return;\n    closed.value = true;\n    visible.value = false;\n  }\n\n  function handleClose() {\n    if (props.beforeClose) {\n      props.beforeClose(hide);\n    } else {\n      close();\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose();\n    }\n  }\n\n  function doOpen() {\n    if (!isClient) {\n      return;\n    }\n\n    visible.value = true;\n  }\n\n  function doClose() {\n    visible.value = false;\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible);\n  }\n\n  if (props.closeOnPressEscape) {\n    useModal({\n      handleClose\n    }, visible);\n  }\n\n  useRestoreActive(visible);\n  watch(() => props.modelValue, val => {\n    if (val) {\n      closed.value = false;\n      open();\n      rendered.value = true;\n      emit(\"open\");\n      zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex();\n      nextTick(() => {\n        if (targetRef.value) {\n          targetRef.value.scrollTop = 0;\n        }\n      });\n    } else {\n      if (visible.value) {\n        close();\n      }\n    }\n  });\n  watch(() => props.fullscreen, val => {\n    if (!targetRef.value) return;\n\n    if (val) {\n      lastPosition = targetRef.value.style.transform;\n      targetRef.value.style.transform = \"\";\n    } else {\n      targetRef.value.style.transform = lastPosition;\n    }\n  });\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true;\n      rendered.value = true;\n      open();\n    }\n  });\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    closed,\n    style,\n    rendered,\n    visible,\n    zIndex\n  };\n};\n\nexport { useDialog };","map":{"version":3,"mappings":"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","names":["useDialog","props","emit","targetRef","lastPosition","visible","ref","closed","rendered","nextZIndex","useZIndex","zIndex","openTimer","closeTimer","normalizeWidth","computed","isNumber","width","style","style2","varPrefix","fullscreen","top","value","afterEnter","afterLeave","UPDATE_MODEL_EVENT","destroyOnClose","beforeLeave","open","openDelay","stop","useTimeoutFn","doOpen","close","closeDelay","doClose","hide","shouldCancel","handleClose","beforeClose","onModalClick","closeOnClickModal","isClient","lockScroll","useLockscreen","closeOnPressEscape","useModal","useRestoreActive","watch","modelValue","val","nextTick","scrollTop","transform","onMounted"],"sources":["../../../../../../packages/components/dialog/src/use-dialog.ts"],"sourcesContent":["import { computed, ref, watch, nextTick, onMounted } from 'vue'\nimport { useTimeoutFn, isClient } from '@vueuse/core'\n\nimport {\n  useLockscreen,\n  useRestoreActive,\n  useModal,\n  useZIndex,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isNumber } from '@element-plus/utils'\n\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { DialogEmits, DialogProps } from './dialog'\n\nexport const useDialog = (\n  props: DialogProps,\n  { emit }: SetupContext<DialogEmits>,\n  targetRef: Ref<HTMLElement | undefined>\n) => {\n  let lastPosition = ''\n  const visible = ref(false)\n  const closed = ref(false)\n  const rendered = ref(false) // when desctroyOnClose is true, we initialize it as false vise versa\n  const { nextZIndex } = useZIndex()\n  const zIndex = ref(props.zIndex || nextZIndex())\n\n  let openTimer: (() => void) | undefined = undefined\n  let closeTimer: (() => void) | undefined = undefined\n\n  const normalizeWidth = computed(() =>\n    isNumber(props.width) ? `${props.width}px` : props.width\n  )\n\n  const style = computed<CSSProperties>(() => {\n    const style: CSSProperties = {}\n    const varPrefix = `--el-dialog`\n    if (!props.fullscreen) {\n      if (props.top) {\n        style[`${varPrefix}-margin-top`] = props.top\n      }\n      if (props.width) {\n        style[`${varPrefix}-width`] = normalizeWidth.value\n      }\n    }\n    return style\n  })\n\n  function afterEnter() {\n    emit('opened')\n  }\n\n  function afterLeave() {\n    emit('closed')\n    emit(UPDATE_MODEL_EVENT, false)\n    if (props.destroyOnClose) {\n      rendered.value = false\n    }\n  }\n\n  function beforeLeave() {\n    emit('close')\n  }\n\n  function open() {\n    closeTimer?.()\n    openTimer?.()\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay))\n    } else {\n      doOpen()\n    }\n  }\n\n  function close() {\n    // if (this.willClose && !this.willClose()) return;\n    openTimer?.()\n    closeTimer?.()\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay))\n    } else {\n      doClose()\n    }\n  }\n\n  function hide(shouldCancel: boolean) {\n    if (shouldCancel) return\n    closed.value = true\n    visible.value = false\n  }\n\n  function handleClose() {\n    if (props.beforeClose) {\n      props.beforeClose(hide)\n    } else {\n      close()\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose()\n    }\n  }\n\n  function doOpen() {\n    if (!isClient) {\n      return\n    }\n\n    // if (props.willOpen?.()) {\n    //  return\n    // }\n    visible.value = true\n  }\n\n  function doClose() {\n    visible.value = false\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible)\n  }\n\n  if (props.closeOnPressEscape) {\n    useModal(\n      {\n        handleClose,\n      },\n      visible\n    )\n  }\n\n  useRestoreActive(visible)\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (val) {\n        closed.value = false\n        open()\n        rendered.value = true // enables lazy rendering\n        emit('open')\n        zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex()\n        // this.$el.addEventListener('scroll', this.updatePopper)\n        nextTick(() => {\n          if (targetRef.value) {\n            targetRef.value.scrollTop = 0\n          }\n        })\n      } else {\n        // this.$el.removeEventListener('scroll', this.updatePopper\n        if (visible.value) {\n          close()\n        }\n      }\n    }\n  )\n\n  watch(\n    () => props.fullscreen,\n    (val) => {\n      if (!targetRef.value) return\n      if (val) {\n        lastPosition = targetRef.value.style.transform\n        targetRef.value.style.transform = ''\n      } else {\n        targetRef.value.style.transform = lastPosition\n      }\n    }\n  )\n\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true\n      rendered.value = true // enables lazy rendering\n      open()\n    }\n  })\n\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    closed,\n    style,\n    rendered,\n    visible,\n    zIndex,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}