{"ast":null,"code":"import { defineComponent, inject, ref, openBlock, createElementBlock, normalizeClass, withModifiers, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElUploadDrag\",\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"file\"],\n\n  setup(props, {\n    emit\n  }) {\n    const uploader = inject(\"uploader\", {});\n    const ns = useNamespace(\"upload\");\n    const dragover = ref(false);\n\n    function onDrop(e) {\n      var _a;\n\n      if (props.disabled || !uploader) return;\n      const accept = ((_a = uploader.props) == null ? void 0 : _a.accept) || uploader.accept;\n      dragover.value = false;\n\n      if (!accept) {\n        emit(\"file\", e.dataTransfer.files);\n        return;\n      }\n\n      emit(\"file\", Array.from(e.dataTransfer.files).filter(file => {\n        const {\n          type,\n          name\n        } = file;\n        const extension = name.indexOf(\".\") > -1 ? `.${name.split(\".\").pop()}` : \"\";\n        const baseType = type.replace(/\\/.*$/, \"\");\n        return accept.split(\",\").map(type2 => type2.trim()).filter(type2 => type2).some(acceptedType => {\n          if (acceptedType.startsWith(\".\")) {\n            return extension === acceptedType;\n          }\n\n          if (/\\/\\*$/.test(acceptedType)) {\n            return baseType === acceptedType.replace(/\\/\\*$/, \"\");\n          }\n\n          if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n            return type === acceptedType;\n          }\n\n          return false;\n        });\n      }));\n    }\n\n    function onDragover() {\n      if (!props.disabled) dragover.value = true;\n    }\n\n    return {\n      ns,\n      dragover,\n      onDrop,\n      onDragover\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(\"dragger\"), _ctx.ns.is(\"dragover\", _ctx.dragover)]),\n    onDrop: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.onDrop && _ctx.onDrop(...args), [\"prevent\"])),\n    onDragover: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.onDragover && _ctx.onDragover(...args), [\"prevent\"])),\n    onDragleave: _cache[2] || (_cache[2] = withModifiers($event => _ctx.dragover = false, [\"prevent\"]))\n  }, [renderSlot(_ctx.$slots, \"default\")], 34);\n}\n\nvar UploadDragger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { UploadDragger as default };","map":{"version":3,"mappings":";;;;;AAgBA,MAAKA,YAAaC,gBAAa;AAC7BC,QAAM,cADuB;AAE7BC,SAAO;AACLC,cAAU;AACRC,YAAMC,OADE;AAERC,eAAS;AAFD;AADL,GAFsB;AAQ7BC,SAAO,CAAC,MAAD,CARsB;;AAS7BC,QAAMN,KAAN,EAAa;AAAEO;AAAF,GAAb,EAAuB;AACrB,UAAMC,WAAWC,OAAO,UAAP,EAAmB,EAAnB,CAAjB;AACA,UAAMC,KAAKC,aAAa,QAAb,CAAX;AACA,UAAMC,WAAWC,IAAI,KAAJ,CAAjB;;AAEA,oBAAgBC,CAAhB,EAA8B;AAC5B,UAAIC,EAAJ;;AAAiC,uCACjC;AACA,uBAAiBA,mBAAjB,KAAiB,IAAjB,GAAiB,MAAjB,GAAiBA,SAAjB,KAAiBP,eAAjB;AACAI;;AACE;AACAL;AAAA;AAEF;;AAGIA,+BAAuB,aAAvB,CAAuBS,KAAvB,EAAuBC,MAAvB,CAAuBC;AACvB,cAAM;AAAAhB;AAAAH;AAAA,YACCmB,IADP;AAEA,cAAMC,gBAAgB,QAAhB,CAAwB,GAAxB,IAAwB,CAAS,CAAjC,GAAiC,2BAAjC,GAAiC,EAAvC;AACA,sBACG,gBACK,OADL,EACK,EADL,CADH;AAKI,4BAAiB,GAAjB,EAAiBC,GAAjB,CAA4BC,KAAX,IAAWA,YAA5B,EAA4BJ,MAA5B,CAA4BI,cAA5B,EAA4BC,IAA5B,CAA4BC;AAC1B;AAAqB;AAEvB;;AACE;AAAkD;AAEpD;;AACE;AAAgB;AAElB;;AAAO;AAAA,SATP;AASO,OAlBX;AAwBN;;AACE;AAAqB,iBAAStB,QAAT,EAAiBW;AAGxC;;AAAO;AAELF,QAFK;AAGLE,cAHK;AAILY,YAJK;AAILC;AAJK;AAIL;;AAzDyB,CAAb,CAAlB;;2CARQC;AAAA,gDANsB;AACzBC,wFADyB;AAEzBH,qEAAkB,OAAlB,IAAkBI,oBAAlB,EAAkB,WAAlB,EAFyB;AAGzBH,qEAAmBG,2CAAnB,EAAmB,WAAnB,EAHyB;AAGEC;AAHF,GAMtB,GADSC,mCACT","names":["_sfc_main","defineComponent","name","props","disabled","type","Boolean","default","emits","setup","emit","uploader","inject","ns","useNamespace","dragover","ref","e","_a","files","filter","file","extension","map","type2","some","acceptedType","onDrop","onDragover","$setup","class","_ctx","onDragleave","renderSlot"],"sources":["../../../../../../packages/components/upload/src/upload-dragger.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('dragger'), ns.is('dragover', dragover)]\"\n    @drop.prevent=\"onDrop\"\n    @dragover.prevent=\"onDragover\"\n    @dragleave.prevent=\"dragover = false\"\n  >\n    <slot></slot>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, inject } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport type { ElUpload } from './upload.type'\n\nexport default defineComponent({\n  name: 'ElUploadDrag',\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['file'],\n  setup(props, { emit }) {\n    const uploader = inject('uploader', {} as ElUpload)\n    const ns = useNamespace('upload')\n    const dragover = ref(false)\n\n    function onDrop(e: DragEvent) {\n      if (props.disabled || !uploader) return\n      const accept = uploader.props?.accept || uploader.accept\n      dragover.value = false\n      if (!accept) {\n        emit('file', e.dataTransfer.files)\n        return\n      }\n      emit(\n        'file',\n        Array.from(e.dataTransfer.files).filter((file) => {\n          const { type, name } = file\n          const extension =\n            name.indexOf('.') > -1 ? `.${name.split('.').pop()}` : ''\n          const baseType = type.replace(/\\/.*$/, '')\n          return accept\n            .split(',')\n            .map((type) => type.trim())\n            .filter((type) => type)\n            .some((acceptedType) => {\n              if (acceptedType.startsWith('.')) {\n                return extension === acceptedType\n              }\n              if (/\\/\\*$/.test(acceptedType)) {\n                return baseType === acceptedType.replace(/\\/\\*$/, '')\n              }\n              if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n                return type === acceptedType\n              }\n              return false\n            })\n        })\n      )\n    }\n\n    function onDragover() {\n      if (!props.disabled) dragover.value = true\n    }\n\n    return {\n      ns,\n      dragover,\n      onDrop,\n      onDragover,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}