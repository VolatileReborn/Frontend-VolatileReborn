{"ast":null,"code":"'use strict';\n\nimport { dateFormat } from './utils.js';\n\nconst OSS = require('ali-oss');\n\nexport default {\n  /**\n   * 创建随机字符串\n   * @param num\n   * @returns {string}\n   */\n  randomString(num) {\n    const chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let res = '';\n\n    for (let i = 0; i < num; i++) {\n      var id = Math.ceil(Math.random() * 35);\n      res += chars[id];\n    }\n\n    return res;\n  },\n\n  /**\n   * 创建OSS客户端对象\n   * @returns {Promise<unknown>}\n   */\n  createOssClient() {\n    return new Promise(resolve => {\n      const client = new OSS({\n        region: 'oss-cn-beijing',\n        // 路径地址\n        accessKeyId: 'LTAI5tBTfT8Jtb4V7yyzi98n',\n        accessKeySecret: 'RG3zfjaLWtzjNI7kBnsYJEICuX3wAG',\n        bucket: 'se3-volatile',\n        secure: true // 上传连接返回支持https\n\n      });\n      resolve(client);\n    });\n  },\n\n  ossUploadFile(option) {\n    const file = option.file;\n    const self = this;\n    return new Promise((resolve, reject) => {\n      const date = dateFormat(new Date(), 'yyyyMMdd');\n      const dateTime = dateFormat(new Date(), 'yyyyMMddhhmmss');\n      const randomStr = self.randomString(4);\n      const extensionName = file.name.substr(file.name.indexOf('.')); // 文件扩展名\n\n      const fileName = 'files/' + date + '/' + dateTime + '_' + randomStr + extensionName; // 执行上传\n\n      self.createOssClient().then(client => {\n        // 异步上传，返回数据\n        resolve({\n          fileName: file.name,\n          fileUrl: \"https://se3-volatile.oss-cn-beijing.aliyuncs.com/\" + fileName\n        }); // 上传处理\n        // 分片上传文件\n\n        client.put(fileName, file //     ,{\n        //     progress:function (p) {\n        //         const e = {}\n        //         e.percent = Math.floor(p*100)\n        //         option.onProgress(e)\n        //     }\n        // }\n        ).then(val => {\n          if (val.res.statusCode === 200) {\n            option.onSuccess('上传成功');\n          } else {\n            option.onError('上传失败');\n          }\n        }, err => {\n          option.onError('上传失败');\n          reject(err);\n        });\n      });\n    });\n  },\n\n  ossGetDownloadUrl(fileName) {\n    // console.log(fileName)\n    const self = this;\n    const response = {\n      'content-disposition': `attachment; filename=${encodeURIComponent(fileName)}`\n    };\n    return new Promise(resolve => {\n      self.createOssClient().then(client => {\n        const url = client.signatureUrl(fileName, {\n          response\n        });\n        resolve({\n          downloadURL: url\n        });\n      });\n    });\n  },\n\n  ossGetReviewUrl(fileName) {\n    const self = this;\n    return new Promise(resolve => {\n      self.createOssClient().then(client => {\n        const url = client.signatureUrl(fileName);\n        resolve({\n          reviewURL: url\n        });\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["/home/lyk/Projects/Volatile/frontend-volatile/src/utils/oss.js"],"names":["dateFormat","OSS","require","randomString","num","chars","res","i","id","Math","ceil","random","createOssClient","Promise","resolve","client","region","accessKeyId","accessKeySecret","bucket","secure","ossUploadFile","option","file","self","reject","date","Date","dateTime","randomStr","extensionName","name","substr","indexOf","fileName","then","fileUrl","put","val","statusCode","onSuccess","onError","err","ossGetDownloadUrl","response","encodeURIComponent","url","signatureUrl","downloadURL","ossGetReviewUrl","reviewURL"],"mappings":"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","sourcesContent":["'use strict'\nimport {dateFormat} from './utils.js'\nconst OSS = require('ali-oss');\n\n\n\nexport default {\n    /**\n     * 创建随机字符串\n     * @param num\n     * @returns {string}\n     */\n    randomString(num) {\n        const chars = [\n            '0','1','2','3','4','5','6','7','8',\n            '9','a','b','c','d','e','f','g','h',\n            'i','j','k','l','m','n','o','p','q',\n            'r','s','t','u','v','w','x','y','z',\n        ]\n        let res = ''\n        for(let i = 0;i<num;i++){\n            var id = Math.ceil(Math.random() * 35)\n            res += chars[id]\n        }\n        return res\n    },\n    /**\n     * 创建OSS客户端对象\n     * @returns {Promise<unknown>}\n     */\n    createOssClient() {\n        return new Promise((resolve) => {\n            const client = new OSS({\n                region: 'oss-cn-beijing', // 路径地址\n                accessKeyId: 'LTAI5tBTfT8Jtb4V7yyzi98n',\n                accessKeySecret: 'RG3zfjaLWtzjNI7kBnsYJEICuX3wAG',\n                bucket: 'se3-volatile',\n                secure: true // 上传连接返回支持https\n            })\n\n            resolve(client)\n        })\n    },\n\n    ossUploadFile(option) {\n        const file = option.file\n        const self = this\n        return new Promise((resolve,reject) => {\n            const date = dateFormat(new Date(),'yyyyMMdd')\n            const dateTime = dateFormat(new Date(),'yyyyMMddhhmmss')\n            const randomStr = self.randomString(4)\n            const extensionName = file.name.substr(file.name.indexOf('.')) // 文件扩展名\n            const fileName = 'files/' + date + '/' + dateTime + '_' + randomStr + extensionName\n            // 执行上传\n            self.createOssClient().then(client => {\n                // 异步上传，返回数据\n                resolve({\n                    fileName:file.name,\n                    fileUrl:\"https://se3-volatile.oss-cn-beijing.aliyuncs.com/\"+fileName\n                });\n                // 上传处理\n                // 分片上传文件\n                client\n                    .put(fileName,file\n                    //     ,{\n                    //     progress:function (p) {\n                    //         const e = {}\n                    //         e.percent = Math.floor(p*100)\n                    //         option.onProgress(e)\n                    //     }\n                    // }\n                    )\n                    .then(val => {\n                        if(val.res.statusCode === 200){\n                            option.onSuccess('上传成功')\n                        }\n                        else {\n                            option.onError('上传失败')\n                        }\n                    },\n                        err =>{\n                        option.onError('上传失败')\n                        reject(err)\n                        }\n                    )\n            })\n        })\n    },\n\n    ossGetDownloadUrl(fileName){\n        // console.log(fileName)\n        const self = this\n        const response = {\n            'content-disposition': `attachment; filename=${encodeURIComponent(fileName)}`\n        }\n        return new Promise(resolve => {\n            self.createOssClient().then(client => {\n                const url = client.signatureUrl(fileName,{response})\n                resolve( {downloadURL:url})\n            })\n        })\n\n    },\n\n    ossGetReviewUrl(fileName){\n        const self = this\n        return new Promise(resolve => {\n            self.createOssClient().then(client => {\n                const url = client.signatureUrl(fileName)\n                resolve({reviewURL:url})\n            })\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}